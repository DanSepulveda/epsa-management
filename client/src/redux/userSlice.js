import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import axios from 'axios'

const HOST = 'http://localhost:4000/api'

const initialState = {
  _id: null,
  username: null,
  email: null,
  uid: null,
  loading: true
}

export const login = createAsyncThunk(
  'login',
  async (values) => {
    const response = await axios.post(`${HOST}/login`, values)
    return response.data
  }
)

export const signup = createAsyncThunk(
  'signup',
  async (values) => {
    const response = await axios.post(`${HOST}/signup`, values)
    return response.data
  }
)

export const loginWithToken = createAsyncThunk(
  'login',
  async () => {
    const response = await axios.get(`${HOST}/login`)
    return response.data
  }
)

export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    increment: (state) => {
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // .addCase(login.pending, (state) => {
      //   state.status = 'loading'
      // })
      .addCase(login.fulfilled, (state, action) => {
        const { success, response } = action.payload
        if (success) {
          state._id = response._id
          state.email = response.email
        }
        state.loading = false
      })
      .addCase(signup.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(signup.fulfilled, (state, action) => {
        const { success, response } = action.payload
        if (success) {
          state._id = response._id
          state.email = response.email
        }
      })
  },
})

export const { increment, decrement, incrementByAmount } = userSlice.actions

export const userState = (state) => state.user

export default userSlice.reducer